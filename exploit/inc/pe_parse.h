/****************************************************************************

    Файл pe_parse.h 

    Заголовочный файл модуля pe_parse.c.

    Маткин Илья Александрович               24.12.2015

****************************************************************************/

#ifndef _PE_PARSE_H_
#define _PE_PARSE_H_

#include <includes.h>
#include <MemWorker.h>

//----------------------------------------

// вспомогательная структура загруженного PE-файла
typedef struct _PeHeaders{

    PBYTE               mem;            // указатель на память спроецированного файла

    IMAGE_DOS_HEADER    *doshead;       // указатель на DOS заголовок
    IMAGE_NT_HEADERS    *nthead;        // указатель на NT заголовок

    IMAGE_IMPORT_DESCRIPTOR *impdir;    // указатель на массив дескрипторов таблицы импорта
    DWORD               impdirSize;     // размер таблицы импорта
    DWORD               impdesCount;    // количество элементов в таблице импорта

    IMAGE_EXPORT_DIRECTORY  *expdir;    // указатель на таблицу экспорта
    DWORD               expdirSize;     // размер таблицы экспорта

    IMAGE_SECTION_HEADER    *sections;  // указатель на таблицу секций (на первый элемент)
    DWORD                   secCount;   // количество секций

} PeHeaders;


typedef struct _KERNEL_MODULE_ {
    PeHeaders pe;
    ULONG base;
    DWORD sizeOfImage;
    const char* name;
    PULONG IAT;
    ULONG IATSize;
    PIMAGE_SECTION_HEADER codeSections;
    ULONG secCount; // количество доступных секций (исполняемых)
}KERNEL_MODULE, * PKERNEL_MODULE;

//----------------------------------------

BOOL LoadPeImage(PKERNEL_MODULE mod, PMEM_WORK worker, ULONG base);

BOOL ParsePeImage (PBYTE mem, PeHeaders *pe);

BOOL LoadAllNeededSections(PKERNEL_MODULE mod, PMEM_WORK worker);

BOOL FindImageBaseByAddr(PMEM_WORK worker, ULONG addr, LPVOID base);

ULONG FindExportByName(PeHeaders* pe, PMEM_WORK worker, const char* name, ULONG base);

BOOL GetAllModulesByIAT(std::vector<KERNEL_MODULE>& modules, PMEM_WORK worker, KERNEL_MODULE& startModule);

ULONG FindFreePlaceInSection(PKERNEL_MODULE module, ULONG neededLen);

unsigned int GetSectionIndexByName(PeHeaders* pe, char* sectionName);

void DumpAllExecutableSections (PeHeaders *pe);

DWORD SearchGadget (PeHeaders *pe, BYTE *gadget, DWORD gadgetSize);

BYTE* SearchBytesInRegion (BYTE *pattern, DWORD patternSize, BYTE *startRegion, DWORD regionSize);

void PrintAllGadget (PeHeaders *pe, BYTE *gadget, DWORD gadgetSize);

DWORD SearchGadgetInSection (PeHeaders *pe, BYTE *gadget, DWORD gadgetSize, char *sectionName);

BOOL SearchAllNeededSection(PKERNEL_MODULE mod);

//----------------------------------------

#endif  // _PE_PARSE_H_
