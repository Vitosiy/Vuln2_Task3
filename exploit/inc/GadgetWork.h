#pragma once
#pragma comment(lib, "fasm.lib")

#include <Windows.h>
#include <Zycore/LibC.h>
#include <Zydis/Zydis.h>
#include <disas.h>
#include <vector>

#include <pe_parse.h>
#include <fasm.h>

enum _TYPE_ {
    Op0 = 1,
    Op1 = 2,
    Op2 = 3,
    Mnem = 4,

};

typedef struct _EXCLUDED_TYPE_ {
    BOOL p; // присутствие
    
    ZydisOperandType optype0;
    ZydisRegister reg0;
    ZydisOperandType optype1;
    ZydisRegister reg1;

    ZydisMnemonic mnem;

    BOOL mnemPriority;
}EXCLUDED_TYPE, *PEXCLUDED_TYPE;

typedef struct _GADGET_ {
    ULONG addr; // реальный адрес гаджета
    ULONG rva;
    ULONG base; // IB модуля

    ZydisMnemonic mnem;
    ZydisDecodedOperand op0;
    ZydisDecodedOperand op1;
    ZydisDecodedOperand op2;

    ULONG countRet; // кол-во байт у retn xx
    ULONG countIncInstr; // кол-во инструкций перед ret
    
    // "нежелательные" инструкции
    //BOOL onlyOP0; // проверка будет только по первому операнду
    //BOOL isAllInstr; // проверка будет по всей инструкции
    PEXCLUDED_TYPE excludedInstrs; // массив недопустимых инструкций перед ret
}GADGET, * PGADGET;



ZyanStatus ZydisInit(ZydisDecoder* decoder, ZydisFormatter* formatter);
ULONG FindGadget(PGADGET gad, std::vector<KERNEL_MODULE>& modules);
ULONG FindGadgetEx(PGADGET gadgets, ULONG gadCount, PEXCLUDED_TYPE excludedInstrs, std::vector<KERNEL_MODULE>& modules);
ULONG FindRopGadget(std::vector<KERNEL_MODULE>& modules, char* strGadget, PULONG countRet, PEXCLUDED_TYPE excludedInstrs, ULONG countIncInstr);
BOOL InitExcluded(PEXCLUDED_TYPE* excluded, char** mnem, char** regs, BOOL pMnemPriority, BOOL excludeMem);
BYTE* AssembleFasm32(char* srcCode, int* codeSize);